// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/singhJasvinder101/go_blog/internal/config"
	"github.com/singhJasvinder101/go_blog/internal/http/handlers/posts"
	"github.com/singhJasvinder101/go_blog/internal/http/handlers/users"
	"github.com/singhJasvinder101/go_blog/storage/postgres"
	"github.com/singhJasvinder101/go_blog/storage/redis"
	"github.com/singhJasvinder101/go_blog/storage/services"
)

// Injectors from wire.go:

func InitializeApplication(cfg *config.Config) (*Application, error) {
	postgresPostgres, err := postgres.NewPostgres(cfg)
	if err != nil {
		return nil, err
	}
	userRepo := postgres.NewUserRepo(postgresPostgres)
	userRepository := ProvideUserRepository(userRepo)
	postRepo := postgres.NewPostRepo(postgresPostgres)
	postRepository := ProvidePostRepository(postRepo)
	redisClient, err := ProvideRedisClient(cfg)
	if err != nil {
		return nil, err
	}
	cache := ProvideCache(redisClient)
	userService := services.NewUserService(userRepository, postRepository, cache)
	userHandler := user_handlers.NewUserHandler(userService)
	postService := services.NewPostService(postRepository, cache)
	postHandler := post_handlers.NewPostHandler(postService)
	application := &Application{
		UserHandler: userHandler,
		PostHandler: postHandler,
		DB:          postgresPostgres,
		Redis:       redisClient,
	}
	return application, nil
}

// wire.go:

func ProvideRedisClient(cfg *config.Config) (*redis.RedisClient, error) {
	return redis.NewRedisClient(cfg, 0)
}

// interface bindings (concrete types to interfaces)
func ProvideUserRepository(repo *postgres.UserRepo) services.UserRepository {
	return repo
}

func ProvidePostRepository(repo *postgres.PostRepo) services.PostRepository {
	return repo
}

func ProvideCache(client *redis.RedisClient) services.Cache {
	return client
}

// all providers ka set (constructors/New functions)
var ProviderSet = wire.NewSet(postgres.NewPostgres, ProvideRedisClient, postgres.NewUserRepo, postgres.NewPostRepo, ProvideUserRepository,
	ProvidePostRepository,
	ProvideCache, services.NewUserService, services.NewPostService, user_handlers.NewUserHandler, post_handlers.NewPostHandler,
)

type Application struct {
	UserHandler *user_handlers.UserHandler
	PostHandler *post_handlers.PostHandler
	DB          *postgres.Postgres
	Redis       *redis.RedisClient
}
